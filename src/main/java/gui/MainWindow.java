package gui;

import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form PantallaPrincipal
     */
    public MainWindow() {
        initComponents();
        setLocationRelativeTo(null); //CENTRA LA VENTANA EN LA PANTALLA
        setTitle("Veterinario Doramas"); //AÑADE TÍTULO A LA VENTANA
        mascotasTable.setBackground(new Color(200, 250, 200));
        mascotasTable.setSelectionMode(0);
        mascotasTable.getColumnModel().getColumn(0).setMaxWidth(60);
        mascotasTable.getColumnModel().getColumn(2).setMaxWidth(100);
        mascotasTable.getColumnModel().getColumn(4).setMaxWidth(100);
        mascotasTable.getColumnModel().getColumn(3).setMinWidth(140);
        mascotasTable.getColumnModel().getColumn(5).setMinWidth(140);
        revisionesTable.setBackground(new Color(255, 200, 200));
        revisionesTable.setSelectionMode(0);
        productosTable.setBackground(new Color(200, 200, 250));
        productosTable.setSelectionMode(0);
    }

    public void annadirMascota(dto.Pet mascota) {
        DefaultTableModel dtm = (DefaultTableModel) mascotasTable.getModel();
        mascota.setNumero(dtm.getRowCount()+1);
        dtm.addRow(mascota.toArrayStrings());
    }

    public void annadirRevision(dto.Examination revision) {
        DefaultTableModel dtm = (DefaultTableModel) revisionesTable.getModel();
        revision.setNumero(dtm.getRowCount()+1);
        dtm.addRow(revision.toArrayStrings());
    }

    public void annadirProducto(dto.Product producto) {
        DefaultTableModel dtm = (DefaultTableModel) productosTable.getModel();
        producto.setNumero(dtm.getRowCount()+1);
        dtm.addRow(producto.toArrayStrings());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cabeceraLabel = new javax.swing.JLabel();
        pestannasPanel = new javax.swing.JTabbedPane();
        mascotasScrollPane = new javax.swing.JScrollPane();
        mascotasTable = new javax.swing.JTable();
        revisionesScrollPane = new javax.swing.JScrollPane();
        revisionesTable = new javax.swing.JTable();
        productosScrollPane = new javax.swing.JScrollPane();
        productosTable = new javax.swing.JTable();
        barraMenu = new javax.swing.JMenuBar();
        mascotaMenu = new javax.swing.JMenu();
        annadirMascotaMenuItem = new javax.swing.JMenuItem();
        eliminarMascotaMenuItem = new javax.swing.JMenuItem();
        limpiarTablaMascotasMenuItem = new javax.swing.JMenuItem();
        revisionesMenu = new javax.swing.JMenu();
        annadirRevisionMenuItem = new javax.swing.JMenuItem();
        eliminarRevisionMenuItem = new javax.swing.JMenuItem();
        limpiarTablaRevisionesMenuItem = new javax.swing.JMenuItem();
        productosMenu = new javax.swing.JMenu();
        annadirProductoMenuItem = new javax.swing.JMenuItem();
        eliminarProductoMenuItem = new javax.swing.JMenuItem();
        limpiarTablaProductosMenuItem = new javax.swing.JMenuItem();
        informacionMenu = new javax.swing.JMenu();
        infoVeteMenuItem = new javax.swing.JMenuItem();
        infoAppMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1360, 707));

        cabeceraLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        cabeceraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cabeceraLabel.setText("Veterinario Doramas");

        mascotasTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mascotasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Java", "Ratón", "Fri Sep 30 22:15:26 WEST 2020", "Doramas", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "Da vueltas"},
                {"2", "SQL", "Ratón", "Fri Sep 30 22:15:26 WEST 2020", "Doramas", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "Molesta a Java"},
                {"3", "Tormenta", "Tortuga", "Fri Sep 30 22:15:26 WEST 2020", "Doramas", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "Muerde"},
                {"4", "Relámpago", "Tortuga", "Fri Sep 30 22:15:26 WEST 2020", "Doramas", "Fri Sep 30 22:15:26 WEST 2020", "Macho", "Muerde"},
                {"5", "Alma", "Perro", "Fri Sep 30 22:15:26 WEST 2020", "Georgia", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "Ladra a los coches"},
                {"6", "Merluza", "Gato", "Fri Sep 30 22:15:26 WEST 2020", "Georgia", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "No es de confianza"},
                {"7", "Cali", "Gato", "Fri Sep 30 22:15:26 WEST 2020", "Georgia", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "Tiene cara de pena"},
                {"8", "Jon el gordinflón", "Hamster", "Fri Sep 30 22:15:26 WEST 2020", "Doramas", "Fri Sep 30 22:15:26 WEST 2020", "Macho", "Albino"},
                {"9", "Golosina", "Hamster", "Fri Sep 30 22:15:26 WEST 2020", "Doramas", "Fri Sep 30 22:15:26 WEST 2020", "Hembra", "Muy cute"},
                {"10", "Bartolo", "Canario", "Fri Sep 30 22:15:26 WEST 2020", "Juan", "Fri Sep 30 22:15:26 WEST 2020", "Macho", "Canario busca canaria"}
            },
            new String [] {
                "Número", "Nombre", "Especie", "Fecha de nacimiento", "Dueño", "Fecha de alta", "Sexo", "Observación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mascotasTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        mascotasTable.setFillsViewportHeight(true);
        mascotasScrollPane.setViewportView(mascotasTable);

        pestannasPanel.addTab("Mascotas", mascotasScrollPane);

        revisionesTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        revisionesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Java", "Fri Sep 30 22:15:26 WEST 2020",  new Integer(50)},
                {"2", "SQL", "Fri Sep 30 22:15:26 WEST 2020",  new Integer(120)},
                {"3", "Alma", "Fri Sep 30 22:15:26 WEST 2020",  new Integer(70)},
                {"4", "Merluza", "Fri Sep 30 22:15:26 WEST 2020",  new Integer(20)},
                {"5", "Cali", "Fri Sep 30 22:15:26 WEST 2020",  new Integer(34)},
                {"6", "Golosina", "Fri Sep 30 22:15:26 WEST 2020",  new Integer(42)}
            },
            new String [] {
                "Nº de revisión", "Mascota", "Fecha de revisión", "Precio (€)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        revisionesTable.setFillsViewportHeight(true);
        revisionesScrollPane.setViewportView(revisionesTable);

        pestannasPanel.addTab("Revisiones", revisionesScrollPane);

        productosTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        productosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Spray antiparásitos", "Perros", "Sanitario", "20"},
                {"2", "Gel protector", "Perros", "Sanitario", "50"},
                {"3", "Bolsa de pienso", "Perros", "Alimentación", "25"},
                {"4", "Collar LED", "Todos", "Accesorio", "10"},
                {"5", "Localizador GPS", "Todos", "Accesorio", "15"},
                {"6", "Cápsulas dietéticas", "Gatos", "Alimentación", "30"}
            },
            new String [] {
                "Nº del producto", "Nombre del producto", "Tipo de animal", "Tipo del producto", "Precio del producto (€)"
            }
        ));
        productosTable.setFillsViewportHeight(true);
        productosScrollPane.setViewportView(productosTable);

        pestannasPanel.addTab("Productos", productosScrollPane);

        mascotaMenu.setText("Mascotas");

        annadirMascotaMenuItem.setText("Añadir mascota...");
        annadirMascotaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annadirMascotaMenuItemActionPerformed(evt);
            }
        });
        mascotaMenu.add(annadirMascotaMenuItem);

        eliminarMascotaMenuItem.setText("Eliminar mascota...");
        eliminarMascotaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarMascotaMenuItemActionPerformed(evt);
            }
        });
        mascotaMenu.add(eliminarMascotaMenuItem);

        limpiarTablaMascotasMenuItem.setText("Limpiar tabla...");
        limpiarTablaMascotasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaMascotasMenuItemActionPerformed(evt);
            }
        });
        mascotaMenu.add(limpiarTablaMascotasMenuItem);

        barraMenu.add(mascotaMenu);

        revisionesMenu.setText("Revisiones");

        annadirRevisionMenuItem.setText("Añadir revisión...");
        annadirRevisionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annadirRevisionMenuItemActionPerformed(evt);
            }
        });
        revisionesMenu.add(annadirRevisionMenuItem);

        eliminarRevisionMenuItem.setText("Eliminar revisión...");
        eliminarRevisionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarRevisionMenuItemActionPerformed(evt);
            }
        });
        revisionesMenu.add(eliminarRevisionMenuItem);

        limpiarTablaRevisionesMenuItem.setText("Limpiar tabla...");
        limpiarTablaRevisionesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaRevisionesMenuItemActionPerformed(evt);
            }
        });
        revisionesMenu.add(limpiarTablaRevisionesMenuItem);

        barraMenu.add(revisionesMenu);

        productosMenu.setText("Productos");

        annadirProductoMenuItem.setText("Añadir producto...");
        annadirProductoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annadirProductoMenuItemActionPerformed(evt);
            }
        });
        productosMenu.add(annadirProductoMenuItem);

        eliminarProductoMenuItem.setText("Eliminar producto...");
        eliminarProductoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarProductoMenuItemActionPerformed(evt);
            }
        });
        productosMenu.add(eliminarProductoMenuItem);

        limpiarTablaProductosMenuItem.setText("Limpiar tabla...");
        limpiarTablaProductosMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarTablaProductosMenuItemActionPerformed(evt);
            }
        });
        productosMenu.add(limpiarTablaProductosMenuItem);

        barraMenu.add(productosMenu);

        informacionMenu.setText("Información");

        infoVeteMenuItem.setText("Información del veterinario...");
        infoVeteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoVeteMenuItemActionPerformed(evt);
            }
        });
        informacionMenu.add(infoVeteMenuItem);

        infoAppMenuItem.setText("Información de la aplicación...");
        infoAppMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoAppMenuItemActionPerformed(evt);
            }
        });
        informacionMenu.add(infoAppMenuItem);

        barraMenu.add(informacionMenu);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pestannasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1048, Short.MAX_VALUE)
                    .addComponent(cabeceraLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(cabeceraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pestannasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void annadirMascotaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annadirMascotaMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(0);
        RegisterPet altaMascota = new RegisterPet(this, true);
        altaMascota.setVisible(true);
    }//GEN-LAST:event_annadirMascotaMenuItemActionPerformed

    private void limpiarTablaMascotasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaMascotasMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(0);
        if (JOptionPane.showConfirmDialog(null, "¿Seguro que desea eliminar los datos de la tabla de mascotas?",
                "Confirmación de eliminación", JOptionPane.YES_NO_OPTION) == 0) {

            DefaultTableModel dtm = (DefaultTableModel) mascotasTable.getModel();
            dtm.setRowCount(0);

        }
    }//GEN-LAST:event_limpiarTablaMascotasMenuItemActionPerformed

    private void annadirProductoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annadirProductoMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(2);
        RegisterProduct altaProducto = new RegisterProduct(this, true);
        altaProducto.setVisible(true);
    }//GEN-LAST:event_annadirProductoMenuItemActionPerformed

    private void infoVeteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoVeteMenuItemActionPerformed
        VetInfo infoVete = new VetInfo(this, true);
        infoVete.setVisible(true);
    }//GEN-LAST:event_infoVeteMenuItemActionPerformed

    private void limpiarTablaRevisionesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaRevisionesMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(1);
        if (JOptionPane.showConfirmDialog(null, "¿Seguro que desea eliminar los datos de la tabla de revisiones?",
                "Confirmación de eliminación", JOptionPane.YES_NO_OPTION) == 0) {

            DefaultTableModel dtm = (DefaultTableModel) revisionesTable.getModel();
            dtm.setRowCount(0);
        }
    }//GEN-LAST:event_limpiarTablaRevisionesMenuItemActionPerformed

    private void limpiarTablaProductosMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarTablaProductosMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(2);
        if (JOptionPane.showConfirmDialog(null, "¿Seguro que desea eliminar los datos de la tabla de productos?",
                "Confirmación de eliminación", JOptionPane.YES_NO_OPTION) == 0) {

            DefaultTableModel dtm = (DefaultTableModel) productosTable.getModel();
            dtm.setRowCount(0);
        }
    }//GEN-LAST:event_limpiarTablaProductosMenuItemActionPerformed

    private void annadirRevisionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annadirRevisionMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(1);
        RegisterExamination altaRevision = new RegisterExamination(this, true);
        altaRevision.setVisible(true);

    }//GEN-LAST:event_annadirRevisionMenuItemActionPerformed

    private void infoAppMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoAppMenuItemActionPerformed
        AppInfo infoApp = new AppInfo(this, true);
        infoApp.setVisible(true);
    }//GEN-LAST:event_infoAppMenuItemActionPerformed

    private void eliminarMascotaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarMascotaMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(0);
        if (mascotasTable.getSelectedRow() < 0 || mascotasTable.getSelectedRow() > mascotasTable.getRowCount()-1) {
            JOptionPane.showMessageDialog(null, "Para eliminar una mascota, selecciónela primero.");
        }
        else {
            
            if (JOptionPane.showConfirmDialog(null, "¿Desea eliminar la mascota seleccionada?") == 0) {
                DefaultTableModel dtm = (DefaultTableModel) mascotasTable.getModel();
                dtm.removeRow(mascotasTable.getSelectedRow());
            }
        }
    }//GEN-LAST:event_eliminarMascotaMenuItemActionPerformed

    private void eliminarRevisionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarRevisionMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(1);
        if (revisionesTable.getSelectedRow() < 0 || revisionesTable.getSelectedRow() > revisionesTable.getRowCount()-1) {
            JOptionPane.showMessageDialog(null, "Para eliminar una revisión, selecciónela primero.");
        }
        else {
            
            if (JOptionPane.showConfirmDialog(null, "¿Desea eliminar la revisión seleccionada?") == 0) {
                DefaultTableModel dtm = (DefaultTableModel) revisionesTable.getModel();
                dtm.removeRow(revisionesTable.getSelectedRow());
            }
        }
    }//GEN-LAST:event_eliminarRevisionMenuItemActionPerformed

    private void eliminarProductoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarProductoMenuItemActionPerformed
        pestannasPanel.setSelectedIndex(2);
        if (productosTable.getSelectedRow() < 0 || productosTable.getSelectedRow() > productosTable.getRowCount()-1) {
            JOptionPane.showMessageDialog(null, "Para eliminar un producto, selecciónelo primero.");
        }
        else {
            
            if (JOptionPane.showConfirmDialog(null, "¿Desea eliminar el producto seleccionado?") == 0) {
                DefaultTableModel dtm = (DefaultTableModel) productosTable.getModel();
                dtm.removeRow(productosTable.getSelectedRow());
            }
        }
    }//GEN-LAST:event_eliminarProductoMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem annadirMascotaMenuItem;
    private javax.swing.JMenuItem annadirProductoMenuItem;
    private javax.swing.JMenuItem annadirRevisionMenuItem;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JLabel cabeceraLabel;
    private javax.swing.JMenuItem eliminarMascotaMenuItem;
    private javax.swing.JMenuItem eliminarProductoMenuItem;
    private javax.swing.JMenuItem eliminarRevisionMenuItem;
    private javax.swing.JMenuItem infoAppMenuItem;
    private javax.swing.JMenuItem infoVeteMenuItem;
    private javax.swing.JMenu informacionMenu;
    private javax.swing.JMenuItem limpiarTablaMascotasMenuItem;
    private javax.swing.JMenuItem limpiarTablaProductosMenuItem;
    private javax.swing.JMenuItem limpiarTablaRevisionesMenuItem;
    private javax.swing.JMenu mascotaMenu;
    private javax.swing.JScrollPane mascotasScrollPane;
    private javax.swing.JTable mascotasTable;
    private javax.swing.JTabbedPane pestannasPanel;
    private javax.swing.JMenu productosMenu;
    private javax.swing.JScrollPane productosScrollPane;
    private javax.swing.JTable productosTable;
    private javax.swing.JMenu revisionesMenu;
    private javax.swing.JScrollPane revisionesScrollPane;
    private javax.swing.JTable revisionesTable;
    // End of variables declaration//GEN-END:variables
}
